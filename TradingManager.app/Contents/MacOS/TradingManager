#!/bin/bash

# 交易记录管理系统 - Mac应用程序启动器
# 版本: v2.0

# 设置颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# 获取应用程序路径
APP_PATH="$(dirname "$(dirname "$(dirname "$0")")")"
PROJECT_PATH="$(dirname "$(dirname "$(dirname "$0")")")"

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 显示启动横幅
show_banner() {
    echo -e "${CYAN}"
    echo "╔════════════════════════════════════════════════════════════════╗"
    echo "║                                                              ║"
    echo "║          🚀 交易记录管理系统 - Mac应用程序                   ║"
    echo "║                                                              ║"
    echo "╚════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# 显示macOS通知
show_notification() {
    local title="$1"
    local message="$2"

    osascript -e "display notification \"$title\" with subtitle \"$message\"" 2>/dev/null || true
}

# 检查进程是否运行
check_process() {
    local service_name="$1"
    local pattern="$2"

    if pgrep -f "$pattern" > /dev/null; then
        log_success "$service_name 正在运行"
        return 0
    else
        log_warning "$service_name 未运行"
        return 1
    fi
}

# 检查端口是否被占用
check_port() {
    local port="$1"
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # 端口被占用
    else
        return 1  # 端口可用
    fi
}

# 等待服务启动
wait_for_service() {
    local url="$1"
    local service_name="$2"
    local max_attempts=30
    local attempt=1

    log_info "等待 $service_name 启动..."
    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" >/dev/null 2>&1; then
            log_success "$service_name 已启动"
            return 0
        fi
        echo -n "."
        sleep 1
        attempt=$((attempt + 1))
    done

    echo
    log_error "$service_name 启动超时"
    return 1
}

# 显示启动进度
show_progress() {
    local current="$1"
    local total="$2"
    local message="$3"

    local percentage=$((current * 100 / total))
    local filled=$((percentage / 5))
    local empty=$((20 - filled))

    printf "\r%s: [" "$message"
    printf "%*s" $filled | tr ' ' '█'
    printf "%*s" $empty | tr ' ' '░'
    printf "] %d%%" $percentage
}

# 主启动函数
start_application() {
    show_banner

    # 切换到项目目录
    cd "$PROJECT_PATH"

    # 步骤1: 检查Python
    show_progress 1 6 "检查Python环境"
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 未安装"
        show_notification "启动失败" "Python3未安装，请先安装Python 3.13+"
        exit 1
    fi

    # 步骤2: 检查Node.js
    show_progress 2 6 "检查Node.js环境"
    if ! command -v node &> /dev/null; then
        log_error "Node.js 未安装"
        show_notification "启动失败" "Node.js未安装，请先安装Node.js 16+"
        exit 1
    fi

    # 步骤3: 激活虚拟环境
    show_progress 3 6 "激活Python虚拟环境"
    if [ ! -d "venv" ]; then
        log_info "创建虚拟环境..."
        python3 -m venv venv
    fi
    source venv/bin/activate

    # 步骤4: 检查Python依赖
    show_progress 4 6 "检查Python依赖"
    if [ -f "backend/requirements.txt" ]; then
        pip install -q -r backend/requirements.txt
    fi

    # 步骤5: 创建必要目录
    show_progress 5 6 "创建目录结构"
    mkdir -p logs backend/data backend/credentials trading_records

    # 步骤6: 启动服务
    show_progress 6 6 "启动Web服务"

    # 查找可用端口
    API_PORT=5002
    while check_port $API_PORT; do
        API_PORT=$((API_PORT + 1))
    done

    # 设置环境变量
    export API_PORT=$API_PORT
    export PYTHONPATH="${PROJECT_PATH}/backend:$PYTHONPATH"
    export REACT_APP_API_URL="http://localhost:$API_PORT/api"

    # 启动API服务器（后台）
    cd backend
    nohup python app/api_server.py > ../logs/api_server.log 2>&1 &
    API_PID=$!
    echo $API_PID > ../.api_server.pid
    cd ..

    # 等待API服务器启动
    API_URL="http://localhost:$API_PORT/api/health"
    if wait_for_service "$API_URL" "API服务器"; then
        log_success "API服务器已启动: $API_URL"
    else
        log_error "API服务器启动失败"
        show_notification "启动失败" "API服务器启动失败"
        exit 1
    fi

    # 启动前端服务器
    cd frontend
    if [ ! -d "node_modules" ]; then
        npm install
    fi

    # 查找可用端口
    FRONTEND_PORT=5173
    while check_port $FRONTEND_PORT; do
        FRONTEND_PORT=$((FRONTEND_PORT + 1))
    done

    # 启动前端服务器（后台）
    nohup npm run dev -- --port $FRONTEND_PORT > ../logs/frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo $FRONTEND_PID > ../.frontend.pid
    cd ..

    # 等待前端服务器启动
    FRONTEND_URL="http://localhost:$FRONTEND_PORT"
    if wait_for_service "$FRONTEND_URL" "前端服务器"; then
        log_success "前端服务器已启动: $FRONTEND_URL"
    else
        log_error "前端服务器启动失败"
        show_notification "启动失败" "前端服务器启动失败"
        exit 1
    fi

    # 显示完成信息
    echo
    echo -e "${GREEN}╔════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║${NC}                      🎉 启动完成！                             ${GREEN}║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${CYAN}🌐 前端应用:${NC} $FRONTEND_URL"
    echo -e "${CYAN}🔗 API服务器:${NC} $API_URL"
    echo

    # 打开浏览器
    open "$FRONTEND_URL"

    # 显示成功通知
    show_notification "系统已启动" "交易记录管理系统运行中: $FRONTEND_URL"

    log_success "应用程序已在后台运行"
}

# 主函数
main() {
    # 检查是否已有服务在运行
    if pgrep -f "api_server.py" > /dev/null || pgrep -f "npm run dev" > /dev/null; then
        echo -e "${YELLOW}检测到已有服务正在运行${NC}"
        echo -e "${BLUE}选择操作:${NC}"
        echo "1) 重新启动服务"
        echo "2) 查看服务状态"
        echo "3) 停止所有服务"
        echo "4) 启动新实例"
        echo
        read -p "请输入选择 (1-4): " choice

        case $choice in
            1)
                echo "正在停止现有服务..."
                pkill -f "api_server.py" 2>/dev/null || true
                pkill -f "npm run dev" 2>/dev/null || true
                sleep 2
                echo "重新启动应用程序..."
                start_application
                ;;
            2)
                echo "服务状态:"
                if check_process "API服务器" "api_server.py"; then
                    echo "✅ API服务器运行中"
                fi
                if check_process "前端服务器" "npm run dev"; then
                    echo "✅ 前端服务器运行中"
                fi
                ;;
            3)
                echo "正在停止所有服务..."
                pkill -f "api_server.py" 2>/dev/null || true
                pkill -f "npm run dev" 2>/dev/null || true
                rm -f .api_server.pid .frontend.pid
                show_notification "服务已停止" "所有服务已停止"
                ;;
            4)
                start_application
                ;;
            *)
                echo "无效选择"
                ;;
        esac
    else
        start_application
    fi
}

# 运行主函数
main "$@"